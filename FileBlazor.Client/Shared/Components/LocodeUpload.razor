@using System.IO
@inherits AppComponentBase
@inject JsonApiClient jsonApiClient
@inject ServiceStackStateProvider AuthStateProvider;
@typeparam TReq

<div class="max-w-xl m-2 mt-4" @ref="fileDropContainer">
    <label for="blazor-input-file"
           class="flex justify-center w-full h-32 px-4 transition border-2 border-gray-300 border-dashed rounded-md appearance-none cursor-pointer hover:border-gray-400 focus:outline-none">
        <span class="flex items-center space-x-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6 text-gray-600" fill="none" viewBox="0 0 24 24"
                 stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round"
                      d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"/>
            </svg>
            @if (!uploading)
            {
                <span class="font-medium text-gray-600">
                    Drop files to Attach, or <span class="text-blue-600 underline">browse</span>
                </span>
            }
            else
            {
                <span class="font-medium text-gray-600">
                    @progress
                </span>
            }


        </span>
        @if (toggleInputClear)
        {
            <InputFile id="blazor-input-file" OnChange="@OnChange" class="w-auto absolute opacity-0 h-32"/>
        }
        else
        {
            <InputFile id="blazor-input-file" OnChange="@OnChange" class="w-auto absolute opacity-0 h-32"/>
        }
    </label>
</div>
<CascadingValue Value="errorStatus">
    <ErrorSummary/>
</CascadingValue>

@code {

    [Parameter]
    public TReq Request { get; set; }

    [Parameter]
    public string FilePropertyName { get; set; }


    ResponseStatus? errorStatus;

    private bool uploading = false;
    private string selectedFile = "";
    // Hack to clear files, avoids issues upload file with same name.
    bool toggleInputClear = false;
    ElementReference fileDropContainer;

    long uploadedBytes = 0;
    double percentageUploaded = 0.0;

    string progress = "Waiting";

    [Parameter]
    public EventCallback OnUploadStarted { get; set; }

    [Parameter]
    public EventCallback OnUploadComplete { get; set; }

    private async Task OnChange(InputFileChangeEventArgs e)
    {
        try
        {
            uploading = true;
            progress = "Started...";
            await UploadFile(e);
        }
        catch (Exception ex)
        {
            if (errorStatus == null)
            {
                errorStatus = new ResponseStatus
                {
                    Errors = new List<ResponseError>()
                    {
                        new ResponseError
                        {
                            Message = ex.Message
                        }
                    }
                };
            }
            progress = $"Failed...";
        }
        finally
        {
            StateHasChanged();
            await Task.Delay(3000);
            uploading = false;
            toggleInputClear = !toggleInputClear;
            StateHasChanged();
        }
    }

    long maxFileSize = 1024 * 1024 * 15;

    async Task UploadFile(InputFileChangeEventArgs e)
    {
        await OnUploadStarted.InvokeAsync();

        using var content = new MultipartFormDataContent()
            .AddParams(Request);

        var file = e.File;
        selectedFile = file.Name;
        progress = $"Uploading {selectedFile}...";
        if (file.Name.IndexOfAny(Path.GetInvalidFileNameChars()) >= 0)
        {
            throw new Exception("Invalid file name.");
        }
        using var stream = file.OpenReadStream(maxFileSize);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        ms.Position = 0;
        content.AddFile(FilePropertyName, file.Name, ms, file.ContentType);

        var api = await jsonApiClient.ApiFormAsync<TReq>(
            Request.GetType().ToApiUrl(), content
            );
        if (!api.Succeeded)
            errorStatus = api.Error;

        StateHasChanged();
        progress = "Upload complete!";

        await OnUploadComplete.InvokeAsync();
        StateHasChanged();
    }

}