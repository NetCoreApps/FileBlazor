@inherits AppComponentBase
@inject ServiceStackStateProvider AuthStateProvider;
@using FileBlazor.ServiceModel.Types

<AuthorizeView>
    <Authorized>
        <div class="border-b border-gray-200">
            <div class="sm:flex sm:items-baseline">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Collections</h3>
                <div class="mt-4 sm:mt-0 sm:ml-10">
                    <nav class="-mb-px flex space-x-8">
                        <!-- Current: "border-indigo-500 text-indigo-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" -->
                        <NavLink href="@(BucketLandingPath + "/public")" ActiveClass="border-indigo-500 text-indigo-600 whitespace-nowrap pb-4 px-1 border-b-2 font-medium text-sm" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap pb-4 px-1 border-b-2 font-medium text-sm" aria-current="page"> Public </NavLink>

                        <NavLink href="@(BucketLandingPath + "/team")" ActiveClass="border-indigo-500 text-indigo-600 whitespace-nowrap pb-4 px-1 border-b-2 font-medium text-sm" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap pb-4 px-1 border-b-2 font-medium text-sm"> Team </NavLink>

                        <NavLink href="@(BucketLandingPath + "/private")" ActiveClass="border-indigo-500 text-indigo-600 whitespace-nowrap pb-4 px-1 border-b-2 font-medium text-sm" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap pb-4 px-1 border-b-2 font-medium text-sm"> Private </NavLink>
                    </nav>
                </div>
            </div>
        </div>
        <GalleryItems AppFiles="Files" SearchTerm="@(SearchTerm)"></GalleryItems>
        <div class="pb-4 mb-4 border-b border-gray-200">
            <h3 class="text-lg leading-6 font-medium text-gray-900">Upload</h3>
        </div>
        @if (FileAccessType == ServiceModel.Types.FileAccessType.Team)
        {
            <div>

                <div>
                    <label class="text-base font-medium text-gray-900">Team Selection</label>
                    <p class="text-sm leading-5 text-gray-500">Upload file for which team?</p>
                    <fieldset class="mt-4">
                        <legend class="sr-only">Role selection</legend>
                        <div class="space-y-4 sm:flex sm:items-center sm:space-y-0 sm:space-x-10">
                            @foreach (var role in userRoles)
                            {
                                <div class="flex items-center">
                                    <input id="@role" name="fileRole" value="@role" type="radio" checked="@(roleSelection == role)"
                                           @onchange="() => roleSelection = role"
                                           class="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300">
                                    <label for="@role" class="ml-3 block text-sm font-medium text-gray-700"> @role </label>
                                </div>
                            }

                        </div>
                    </fieldset>
                </div>
            </div>
        }
        <LocodeUpload Request="request" FilePropertyName="AppFile" OnUploadComplete="OnUploadComplete"/>
    </Authorized>
    <Authorizing>Loading...</Authorizing>
    <NotAuthorized>
        @if (FileAccessType == ServiceModel.Types.FileAccessType.Public)
        {
            <GalleryItems AppFiles="Files" SearchTerm="@(SearchTerm)"></GalleryItems>
        }
        else
        {
            <span>Login to see @FileAccessType files.</span>
        }
    </NotAuthorized>
</AuthorizeView>


@code {

    [Parameter]
    public Func<string, IFileItemRequest> CreateRequest { get; set; }

    [Parameter]
    public EventCallback OnUploadComplete { get; set; }

    [Parameter]
    public List<FileItemWithFile> Files { get; set; }

    [Parameter]
    public FileAccessType? FileAccessType { get; set; }

    [Parameter]
    public string BucketLandingPath { get; set; }

    [Parameter]
    public string SearchTerm { get; set; } = "";

    async Task populateRoles()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        userRoles = authState.User.GetRoles().ToList();
        roleSelection = userRoles.IsEmpty() ? "" : userRoles[0];
    }

    private IFileItemRequest request;
    private string roleSelection = "";
    private List<string> userRoles = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await populateRoles();
    }

    protected override async Task OnParametersSetAsync()
    {
        request = CreateRequest(roleSelection);
        await base.OnParametersSetAsync();
    }

}