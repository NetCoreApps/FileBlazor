@page "/azure/{AccessType}"
@using FileBlazor.ServiceModel.Types
@inject ServiceStackStateProvider AuthStateProvider;
@inject NavigationManager NavigationManager;
@inherits AppComponentBase
@inject JsonApiClient jsonApiClient;
<SetHeader>
    <h1 class="text-2xl font-semibold text-gray-900">Azure View - @FileAccessType.ToString()</h1>
</SetHeader>

<div>
    @if (FileAccessType == ServiceModel.Types.FileAccessType.Team)
    {
        <div>

            <div>
                <label class="text-base font-medium text-gray-900">Team Selection</label>
                <p class="text-sm leading-5 text-gray-500">Upload file for which team?</p>
                <fieldset class="mt-4">
                    <legend class="sr-only">Role selection</legend>
                    <div class="space-y-4 sm:flex sm:items-center sm:space-y-0 sm:space-x-10">
                        @foreach (var role in userRoles)
                        {
                            <div class="flex items-center">
                                <input id="@role" name="fileRole" value="@role" type="radio" checked="@(roleSelection == role)"
                                       @onchange="() => roleSelection = role"
                                       class="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-300">
                                <label for="@role" class="ml-3 block text-sm font-medium text-gray-700"> @role </label>
                            </div>
                        }

                    </div>
                </fieldset>
            </div>
        </div>
    }

    <BucketView Files="AppFiles"
                BucketLandingPath="/azure"
                FileAccessType="FileAccessType"
                CreateRequest="() => new CreateAzureFileItem { FileAccessType = FileAccessType }"
                OnUploadComplete="OnUploadComplete"/>
</div>


@code {

    [Parameter]
    public string? AccessType { get; set; }

    private FileAccessType? FileAccessType;

    private List<FileItemWithFile> AppFiles { get; set; } = new List<FileItemWithFile>();

    ResponseStatus? errorStatus;
    bool loading = false;

    async Task OnUploadComplete()
    {
        await refreshFiles();
    }

    private List<string> userRoles = new();

    private string roleSelection = "";

    async Task populateRoles()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        userRoles = authState.User.GetRoles().ToList();
        roleSelection = userRoles.IsEmpty() ? "" : userRoles[0];
    }

    protected override async Task OnInitializedAsync()
    {
        await refreshFiles();
        await populateRoles();
        await base.OnInitializedAsync();
    }

    async Task refreshFiles()
    {
        loading = true;
        AppFiles.Clear();
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.GetUserId();
        ApiResult<QueryResponse<AzureFileItem>> apiFileItem;

        if (authState.IsAuthenticated())
        {
            apiFileItem = await ApiAsync(new QueryAzureFileItems
            {
                FileAccessType = FileAccessType,
                AppUserId = FileAccessType == ServiceModel.Types.FileAccessType.Private ?
                    int.Parse(userId) : null
            });
        }
        else
        {
            apiFileItem = await ApiAsync(new QueryPublicAzureFileItems());
        }

        if (apiFileItem.Succeeded)
        {
            AppFiles.AddRange(apiFileItem.Response!.Results.Select(x => new FileItemWithFile(x, x.AppFile)));
        }
        else
            errorStatus = apiFileItem.Error;

        loading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AccessType == null)
            NavigationManager.NavigateTo("/azure");
        else
        {
            FileAccessType = AccessType.ToEnum<FileAccessType>();
        }
        await refreshFiles();
        await base.OnParametersSetAsync();
    }
    } 