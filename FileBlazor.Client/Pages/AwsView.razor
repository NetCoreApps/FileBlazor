@page "/aws/{AccessType}"
@using FileBlazor.ServiceModel.Types
@using FileBlazor.Client.Components.Shared
@inject NavigationManager NavigationManager;
@inherits AuthBlazorComponentBase
@rendermode InteractiveAuto

<SetHeader>
    <h1 class="text-2xl font-semibold text-gray-900">Aws View - @FileAccessType.ToString()</h1>
</SetHeader>

<div class="mt-4">

    <SearchFiles class="pb-4" OnSearch="performSearch"></SearchFiles>
    <BucketView Files="AppFiles"
                BucketLandingPath="/aws"
                FileAccessType="FileAccessType ?? ServiceModel.Types.FileAccessType.Public"
                CreateRequest="createRequest"
                OnUploadComplete="OnUploadComplete"
                SearchTerm="@(searchTerm)"/>

</div>

@code {

    [Parameter]
    public string? AccessType { get; set; }

    private FileAccessType? FileAccessType;

    private List<FileItemWithFile> AppFiles { get; set; } = new();

    private string searchTerm;

    ResponseStatus? errorStatus;

    bool loading = false;


    async Task OnUploadComplete()
    {
        await refreshFiles();
    }

    CreateS3FileItem createRequest(string optionalRole)
    {
        return new CreateS3FileItem { 
            FileAccessType = FileAccessType, 
            RoleName = FileAccessType == ServiceModel.Types.FileAccessType.Team ? optionalRole : null 
        };
    }

    void performSearch(string searchTerm)
    {
        Console.WriteLine("Search Term: " + searchTerm);
        this.searchTerm = searchTerm;
    }

    protected override async Task OnInitializedAsync()
    {
        if (FileAccessType != null)
            await refreshFiles();
        
        await base.OnInitializedAsync();
    }

    async Task refreshFiles()
    {
        loading = true;
        AppFiles.Clear();
        var userId = User.GetUserId();
        ApiResult<QueryResponse<S3FileItem>> apiFileItem;
        if (IsAuthenticated)
        {
            apiFileItem = await ApiAsync(new QueryS3FileItems
            {
                FileAccessType = FileAccessType ?? ServiceModel.Types.FileAccessType.Public,
                AppUserId = FileAccessType == ServiceModel.Types.FileAccessType.Private ?
                    int.Parse(userId) : null,
                FileName = searchTerm.IsNullOrEmpty() ? null : searchTerm
            });
        }
        else
        {
            apiFileItem = await ApiAsync(new QueryPublicS3FileItems());
        }

        if (apiFileItem.Succeeded)
        {
            AppFiles.AddRange(apiFileItem.Response!.Results.Select(x => new FileItemWithFile(x, x.AppFile)));
        }
        else
            errorStatus = apiFileItem.Error;

        loading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AccessType == null)
            NavigationManager.NavigateTo("/aws");
        else
        {
            FileAccessType = AccessType.ToEnum<FileAccessType>();
        }
        if (FileAccessType != null)
            await refreshFiles();
        await base.OnParametersSetAsync();
    }
    } 