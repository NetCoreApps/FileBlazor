@page "/aws/{AccessType}"
@using FileBlazor.ServiceModel.Types
@using System.IO
@using System.Net.Http.Headers
@using System.Text.Json
@inject ServiceStackStateProvider AuthStateProvider;
@inject NavigationManager NavigationManager;
@inherits AppComponentBase
@inject JsonApiClient jsonApiClient;
<SetHeader>
    <h1 class="text-2xl font-semibold text-gray-900">Aws View - @FileAccessType.ToString()</h1>
</SetHeader>

<div>

    
<BucketView Files="AppFiles" 
            BucketLandingPath="/aws" 
            FileAccessType="FileAccessType" 
            CreateRequest="() => new CreateS3File { FileAccessType = FileAccessType }" 
            OnUploadComplete="OnUploadComplete" />

</div>

@code {
    [Parameter]
    public string? AccessType { get; set; }

    private FileAccessType? FileAccessType;

    private List<IAppFile> AppFiles { get; set; } = new List<IAppFile>();

    ResponseStatus? errorStatus;

    bool loading = false;

    async Task OnUploadComplete()
    {
        await refreshFiles();
    }

    protected override async Task OnInitializedAsync()
    {
        await refreshFiles();
        await base.OnInitializedAsync();
    }

    async Task refreshFiles()
    {
        loading = true;
        AppFiles.Clear();
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.GetUserId();
        var request = new QueryAppUserS3File
            {
                FileAccessType = FileAccessType
            };
        // Filter 
        if(FileAccessType == ServiceModel.Types.FileAccessType.User)
        {
            request.AppUserId = userId == null ? null : int.Parse(userId);
        }
        var api = await ApiAsync(request);
        if (api.Succeeded)
        {
            AppFiles.AddRange(api.Response!.Results.Select(x => x.AppFile));
        }
        else
            errorStatus = api.Error;

        loading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if(AccessType == null)
            NavigationManager.NavigateTo("/aws");
        else
        {
            FileAccessType = AccessType.ToEnum<FileAccessType>();
        }
        await refreshFiles();
        await base.OnParametersSetAsync();
    }
}