@page "/filesystem/{AccessType}"
@using FileBlazor.ServiceModel.Types
@inject ServiceStackStateProvider AuthStateProvider;
@inject NavigationManager NavigationManager;
@inherits AppComponentBase
@inject JsonApiClient jsonApiClient;
<SetHeader>
    <h1 class="text-2xl font-semibold text-gray-900">File System View - @FileAccessType.ToString()</h1>
    <SearchFiles OnSearch="performSearch"></SearchFiles>
</SetHeader>

<div class="mt-4">

    <BucketView Files="AppFiles"
                BucketLandingPath="/filesystem"
                FileAccessType="FileAccessType ?? ServiceModel.Types.FileAccessType.Public"
                CreateRequest="createRequest"
                OnUploadComplete="OnUploadComplete"/>
</div>


@code {

    [Parameter]
    public string? AccessType { get; set; }

    private FileAccessType? FileAccessType;

    private List<FileItemWithFile> AppFiles { get; set; } = new List<FileItemWithFile>();

    private string searchTerm;

    ResponseStatus? errorStatus;
    bool loading = false;

    async Task OnUploadComplete()
    {
        await refreshFiles();
    }

    CreateFileSystemFileItem createRequest(string optionalRole)
    {
        return new CreateFileSystemFileItem
        {
            FileAccessType = FileAccessType,
            RoleName = FileAccessType == ServiceModel.Types.FileAccessType.Team ? optionalRole : null
        };
    }

    void performSearch(string searchTerm)
    {
        this.searchTerm = searchTerm;
    }

    protected override async Task OnInitializedAsync()
    {
        await refreshFiles();
        await base.OnInitializedAsync();
    }

    async Task refreshFiles()
    {
        loading = true;
        AppFiles.Clear();
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.GetUserId();
        ApiResult<QueryResponse<FileSystemFileItem>> apiFileItem;

        if (authState.IsAuthenticated())
        {
            apiFileItem = await ApiAsync(new QueryFileSystemFileItems()
            {
                FileAccessType = FileAccessType ?? ServiceModel.Types.FileAccessType.Public,
                AppUserId = FileAccessType == ServiceModel.Types.FileAccessType.Private ?
                    int.Parse(userId) : null
            });
        }
        else
        {
            apiFileItem = await ApiAsync(new QueryPublicFileSystemFileItems());
        }

        if (apiFileItem.Succeeded)
        {
            AppFiles.AddRange(apiFileItem.Response!.Results.Select(x => new FileItemWithFile(x, x.AppFile)));
        }
        else
            errorStatus = apiFileItem.Error;

        loading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AccessType == null)
            NavigationManager.NavigateTo("/filesystem");
        else
        {
            FileAccessType = AccessType.ToEnum<FileAccessType>();
        }
        await refreshFiles();
        await base.OnParametersSetAsync();
    }
    } 