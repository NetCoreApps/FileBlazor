@page "/filesystem/{AccessType}"
@using FileBlazor.ServiceModel.Types
@inject ServiceStackStateProvider AuthStateProvider;
@inject NavigationManager NavigationManager;
@inherits AppComponentBase
@inject JsonApiClient jsonApiClient;
<SetHeader>
<h1 class="text-2xl font-semibold text-gray-900">File System View - @FileAccessType.ToString()</h1>
</SetHeader>

<BucketView Files="AppFiles" 
            BucketLandingPath="/filesystem" 
            FileAccessType="FileAccessType" 
            CreateRequest="() => new CreateFileSystemFileItem { FileAccessType = FileAccessType }" 
            OnUploadComplete="OnUploadComplete" />

@code {
    [Parameter]
    public string? AccessType { get; set; }

    private FileAccessType? FileAccessType;

    private List<FileItemWithFile> AppFiles { get; set; } = new List<FileItemWithFile>();

    ResponseStatus? errorStatus;
    bool loading = false;

    async Task OnUploadComplete()
    {
        await refreshFiles();
    }

    protected override async Task OnInitializedAsync()
    {
        await refreshFiles();
        await base.OnInitializedAsync();
    }

    async Task refreshFiles()
    {
        loading = true;
        AppFiles.Clear();
        var api = await ApiAsync(new QueryFileSystemFileItems
        {
            FileAccessType = FileAccessType
        });
        if (api.Succeeded)
        {
            AppFiles.AddRange(api.Response!.Results.Select(x => new FileItemWithFile(x, x.AppFile)));
        }
        else
            errorStatus = api.Error;

        loading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AccessType == null)
            NavigationManager.NavigateTo("/filesystem");
        else
        {
            FileAccessType = AccessType.ToEnum<FileAccessType>();
        }
        await refreshFiles();
        await base.OnParametersSetAsync();
    }
}