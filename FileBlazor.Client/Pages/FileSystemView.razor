@page "/filesystem/{AccessType}"
@using FileBlazor.ServiceModel.Types
@inject ServiceStackStateProvider AuthStateProvider;
@inject NavigationManager NavigationManager;
@inherits AppComponentBase
@inject JsonApiClient jsonApiClient;
<SetHeader>
<h1 class="text-2xl font-semibold text-gray-900">File System View - @FileAccessType.ToString()</h1>
</SetHeader>

@if (FileAccessType == ServiceModel.Types.FileAccessType.Gallery && AppFiles != null)
{
    <BucketView Files="PublicAppFiles" BucketLandingPath="/filesystem" FileAccessType="FileAccessType" CreateRequest="() => new CreateFileSystemFile { FileAccessType = FileAccessType }" OnUploadComplete="OnUploadComplete" />
}
@if (FileAccessType == ServiceModel.Types.FileAccessType.Private && AppFiles != null)
{
    <BucketView Files="PublicAppFiles" BucketLandingPath="/filesystem" FileAccessType="FileAccessType" CreateRequest="() => new CreateFileSystemFile { FileAccessType = FileAccessType }" OnUploadComplete="OnUploadComplete" />
}
@if (FileAccessType == ServiceModel.Types.FileAccessType.Public && AppFiles != null)
{
    <BucketView Files="PublicAppFiles" BucketLandingPath="/filesystem" FileAccessType="FileAccessType" CreateRequest="() => new CreateFileSystemFile { FileAccessType = FileAccessType }" OnUploadComplete="OnUploadComplete" />
}
@code {
    [Parameter]
    public string? AccessType { get; set; }

    private FileAccessType? FileAccessType;

    private List<IAppFile> AppFiles { get; set; } = new List<IAppFile>();

    private List<IAppFile> PrivateAppFiles { get; set; } = new List<IAppFile>();
    private List<IAppFile> PublicAppFiles { get; set; } = new List<IAppFile>();
    private List<IAppFile> GalleryAppFiles { get; set; } = new List<IAppFile>();
    ResponseStatus? errorStatus;

    async Task OnUploadComplete()
    {
        await refreshFiles();
    }

    protected override async Task OnInitializedAsync()
    {
        await refreshFiles();
        await base.OnInitializedAsync();
    }

    async Task refreshFiles()
    {
        var api = await ApiAsync(new QueryAppUserFile());
        if (api.Succeeded)
        {
            GalleryAppFiles.Clear();
            PublicAppFiles.Clear();
            PrivateAppFiles.Clear();
            GalleryAppFiles.AddRange(api.Response!.Results.Where(x => x.FileAccessType == ServiceModel.Types.FileAccessType.Gallery).Select(x => x.AppFile));
            PublicAppFiles.AddRange(api.Response!.Results.Where(x => x.FileAccessType == ServiceModel.Types.FileAccessType.Public).Select(x => x.AppFile));
            PrivateAppFiles.AddRange(api.Response!.Results.Where(x => x.FileAccessType == ServiceModel.Types.FileAccessType.Private).Select(x => x.AppFile));
        }
        else
            errorStatus = api.Error;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AccessType == null)
            NavigationManager.NavigateTo("/filesystem");
        else
        {
            FileAccessType = AccessType.ToEnum<FileAccessType>();
        }
        await base.OnParametersSetAsync();
    }
}